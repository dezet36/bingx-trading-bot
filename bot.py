import os
import time
import random
import json
import schedule
import tweepy
import google.generativeai as genai
import requests
from dotenv import load_dotenv

load_dotenv()

# === Twitter API ===
client = tweepy.Client(
    consumer_key=os.getenv("API_KEY"),
    consumer_secret=os.getenv("API_SECRET"),
    access_token=os.getenv("ACCESS_TOKEN"),
    access_token_secret=os.getenv("ACCESS_TOKEN_SECRET"),
    wait_on_rate_limit=True
)

# üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ 401 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    me = client.get_me()
    if not me or not me.data:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ X Developer Portal.")
    bot_id = me.data.id
    print(f"ü§ñ Bot ID: {bot_id}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    exit(1)

# === Gemini AI ===
gemini_api_key = os.getenv("GEMINI_API_KEY")
use_gemini = bool(gemini_api_key)

if use_gemini:
    genai.configure(api_key=gemini_api_key)
    gemini_model = genai.GenerativeModel(
        "gemini-1.5-flash",
        safety_settings={k: "BLOCK_NONE" for k in [
            "HARM_CATEGORY_HARASSMENT",
            "HARM_CATEGORY_HATE_SPEECH",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_DANGEROUS_CONTENT"
        ]}
    )
    print("‚úÖ Gemini AI –≤–∫–ª—é—á—ë–Ω")
else:
    print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")

# === RSS-–ª–µ–Ω—Ç—ã (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤) ===
RSS_FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/",
    "https://cointelegraph.com/rss",
    "https://decrypt.co/feed",
    "https://cryptobriefing.com/feed/",
    "https://news.bitcoin.com/feed/",
    "https://bitcoinmagazine.com/.rss/full/",
    "https://beincrypto.com/feed/",
    "https://thedefiant.io/rss/",
    "https://blockworks.co/news/feed/",
    "https://glassnode.com/feed.xml",
    "https://santiment.net/blog/feed/",
    "https://nftnow.com/feed/",
    "https://nftevening.com/feed/",
    "https://www.coindesk.com/policy/feed/"
]

# === –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã ===
MEDIA_ACCOUNTS = ["coindesk", "cointelegraph", "decrypt", "bitcoinmagazine", "blockworks", "bingx_official"]
PEOPLE_ACCOUNTS = ["VitalikButerin", "cz_binance", "saylor", "RaoulGMI", "lindaxie", "cobie", "peter_szilagyi", "hasufl", "LynAldenContact", "CryptoRand"]

processed_mentions = set()
processed_trusted_tweets = set()

# ======================
# –ü–ê–†–°–ò–ù–ì RSS –ë–ï–ó FEEDPARSER
# ======================

def parse_rss_feed(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        from xml.etree import ElementTree as ET
        root = ET.fromstring(response.content)
        items = []
        for item in root.findall(".//item"):
            title_elem = item.find("title")
            link_elem = item.find("link")
            title = title_elem.text.strip() if title_elem is not None and title_elem.text else "No title"
            link = link_elem.text.strip() if link_elem is not None and link_elem.text else "https://cointelegraph.com"
            items.append({"title": title, "link": link})
        return items
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {url}: {e}")
        return []

def get_latest_crypto_news():
    print("üîç –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    random.shuffle(RSS_FEEDS)
    for url in RSS_FEEDS:
        print(f"üì° –ü–∞—Ä—Å–∏–Ω–≥: {url}...")
        items = parse_rss_feed(url)
        if items:
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞: {items[0]['title']}")
            return items[0]["title"], items[0]["link"]
    print("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–ª—É—à–∫—É")
    return "–°–ª–µ–¥–∏ –∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–æ–º", "https://cointelegraph.com"

# ======================
# –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ù–ê–°–¢–†–û–ï–ù–ò–ô
# ======================

def analyze_sentiment(kw="#bitcoin", cnt=15):
    return random.choice(["–±—ã—á—å–µ üü¢", "–º–µ–¥–≤–µ–∂—å–µ üî¥", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ ‚ö™"])

# ======================
# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================

def load_crypto_terms():
    try:
        with open("crypto_terms.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return [{"term": "Blockchain", "definition": "–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä."}]

def get_crypto_prices():
    try:
        res = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd", timeout=5)
        data = res.json()
        return f"BTC: ${data['bitcoin']['usd']:,} | ETH: ${data['ethereum']['usd']:,}"
    except:
        return "–¶–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

def should_reply_with_price(text):
    return any(kw in text.lower() for kw in ["price", "btc", "eth", "bitcoin", "ethereum"])

def summarize_news(title, url):
    if not use_gemini:
        return f"{title[:100]}..." if len(title) > 100 else title
    prompt = f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –≤ –æ–¥–∏–Ω —Ç–≤–∏—Ç (–º–∞–∫—Å 120 —Å–∏–º–≤–æ–ª–æ–≤): '{title}'. –ò—Å—Ç–æ—á–Ω–∏–∫: {url}"
    try:
        res = gemini_model.generate_content(prompt)
        s = res.text.strip().replace("\n", " ")
        return s[:117] + "..." if len(s) > 120 else s
    except:
        return title[:100]

def generate_reply(text, username, author_id):
    text_lower = text.lower()
    include_ref = random.random() < 0.3
    ref = os.getenv("REFERRAL_LINK", "https://www.bingx.com") if include_ref else ""
    ref_suffix = f" ‚Üí {ref}" if ref else ""

    negative_keywords = ["lost", "scam", "rip", "angry", "hate", "bad signal", "wrong", "dumped", "rekt", "sucks", "fuck", "wtf"]
    if any(kw in text_lower for kw in negative_keywords):
        replies = [
            "–ü–æ—Ç–µ—Ä—è–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å? –≠—Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–∏—á–∫–∞.",
            "–¢–≤–æ–π R:R –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–æ–ª—å.",
            "Rekt? –¢—ã —Ç–æ—Ä–≥–æ–≤–∞–ª –±–µ–∑ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –≠—Ç–æ –∞–∑–∞—Ä—Ç, –∞ –Ω–µ —Ç—Ä–µ–π–¥–∏–Ω–≥.",
            "–†—ã–Ω–∫–∏ –Ω–µ –∑–∞–±–æ—Ç—è—Ç—Å—è –æ —Ç–≤–æ—ë–º PnL. –ò —è —Ç–æ–∂–µ.",
            "–°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø? –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–∞—É—á–∏—à—å—Å—è —É–≤–∞–∂–∞—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å."
        ]
        reply = random.choice(replies) + ref_suffix
        return reply if len(reply) <= 280 else reply[:277] + "..."

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ generate_reply –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å)

    general_replies = [
        "–¢—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∏–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –±–æ–≥–∞—Ç–µ—é—Ç?",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω—è–µ—à—å —Å–µ—Ç–∞–ø—ã? –í—ã–±–∏—Ä–∞–π –±—ã—Å—Ç—Ä–æ.",
        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã. –ù–æ–ª—å –∑–∞—Ç—Ä–∞—Ç. –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ 1% —Ä–∏—Å–∫–∞.",
        "95% —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Ç–µ—Ä–ø—è—Ç –Ω–µ—É–¥–∞—á—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –Ω–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –¢—ã –∏–∑ 5%?",
        "–ò–ò –Ω–µ —Å–ø–∏—Ç. –†—ã–Ω–∫–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω?"
    ]
    final_reply = random.choice(general_replies) + ref_suffix
    if len(final_reply) > 280:
        final_reply = final_reply[:277] + "..."
    return final_reply

def should_retweet(text):
    return any(kw in text.lower() for kw in ["thank", "useful", "great", "accurate"])

# ======================
# –§–£–ù–ö–¶–ò–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
# ======================

def post_crypto_term():
    terms = load_crypto_terms()
    term_data = random.choice(terms)
    tweet = f"üìö –¢–µ—Ä–º–∏–Ω –¥–Ω—è:\n\n**{term_data['term']}** ‚Äî {term_data['definition']}\n\n–ù–∞—á–Ω–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ BingX —Å –±–æ–Ω—É—Å–æ–º üëâ {os.getenv('REFERRAL_LINK', 'https://www.bingx.com')}"
    if len(tweet) > 280:
        tweet = tweet[:277] + "..."
    try:
        client.create_tweet(text=tweet)
        print("üìñ –¢–µ—Ä–º–∏–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞: {e}")

def repost_trusted_content():
    media_part = " OR ".join([f"from:{acc}" for acc in MEDIA_ACCOUNTS])
    people_part = " OR ".join([f"from:{acc}" for acc in PEOPLE_ACCOUNTS])
    query = f"({media_part}) OR ({people_part}) (bitcoin OR ethereum OR crypto)"
    try:
        tweets = client.search_recent_tweets(query=query, max_results=20)
        if not tweets or not tweets.data:
            return
        for tweet in tweets.data:
            if tweet.id in processed_trusted_tweets or "RT @" in tweet.text or len(tweet.text) < 30:
                continue
            try:
                client.retweet(tweet.id)
                print(f"üîÅ –†–µ–ø–æ—Å—Ç: {tweet.text[:50]}...")
                processed_trusted_tweets.add(tweet.id)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–ø–æ—Å—Ç–∞: {e}")
                processed_trusted_tweets.add(tweet.id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞: {e}")

def engage_with_mentions():
    global processed_mentions
    try:
        mentions = client.get_users_mentions(id=bot_id, max_results=20)
        if not mentions or not mentions.data:
            return
        for mention in reversed(mentions.data):
            if mention.id in processed_mentions or mention.author_id == bot_id:
                continue
            try:
                client.like(mention.id)
                if should_retweet(mention.text):
                    client.retweet(mention.id)
                author = client.get_user(id=mention.author_id)
                reply_text = generate_reply(mention.text, author.data.username, mention.author_id)
                client.create_tweet(text=reply_text, in_reply_to_tweet_id=mention.id)
                print(f"üí¨ –û—Ç–≤–µ—Ç–∏–ª @{author.data.username}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            processed_mentions.add(mention.id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def post_analytical_tweet():
    print("üîÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–≤–∏—Ç–∞...")
    try:
        title, url = get_latest_crypto_news()
        sentiment = analyze_sentiment()
        summary = summarize_news(title, url)
        ref = os.getenv("REFERRAL_LINK", "https://www.bingx.com")
        tweet = f"ü§ñ –ò–ò-–ø—É–ª—å—Å —Ä—ã–Ω–∫–∞\n\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}\nüì∞ {summary}\n{url}\n\n–ù–∞—á–Ω–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ BingX —Å –±–æ–Ω—É—Å–æ–º üëâ {ref}"
        if len(tweet) > 280:
            tweet = tweet[:277] + "..."
        client.create_tweet(text=tweet)
        print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–≤–∏—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ======================
# –ó–ê–ü–£–°–ö
# ======================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ BingX Trading Bot...")
    post_analytical_tweet()  # –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    schedule.every(3).hours.do(post_analytical_tweet)
    schedule.every(30).minutes.do(repost_trusted_content)
    schedule.every(5).minutes.do(engage_with_mentions)

    while True:
        schedule.run_pending()
        time.sleep(30)